1 UML ДІАГРАМА ПРЕЦЕДЕНТІВ

Користувачами системи є 2 типи акторів: тренер та адміністратор. За допомогою вебзастосунок працівнику, клієнту надаються такі можливості, як авторизація та реєстрація, забезпечує відображення інформації відповідно ролі користувача, відображення відвідувачів спортзалу. Адміністратори також використовують вебзастосунок задля адміністрування облікових записів.
Для проєктування клієнтської частини попередньо була розроблена діаграма прецедентів (див. рис. 1).

2 UML ДІАГРАМА КОМПОНЕНТ

Для проєктування клієнтської частини попередньо була розроблена UML діаграму компонент (див. рис. 2). З неї видно, що основним файлом, який містить розмітку і відповідає за відображення усієї необхідної інформації користувачеві, є main.dart. Застосунок було розроблено відповідно до стандартів та правил розробки Flutter застосунків. Також було використано патерн Dependenci Injection для зберігання стану та обміну ним між різними частинами застосунку. Окрім цього для забезпечення гарного досвіду користувача загалом використовувався асинхронним підхід розробки, що забезпечує не блокування застосунку на IO операціях. Фрагмент коду файлу main.dart наведено у додатку A.

3 UML ДІАГРАМА ПАКЕТІВ

Для структури програмної системи було виділено пакети, які складають систему. Ці пакети та зв’язки між ними можна побачити на Діаграмі пакетів (рис. 3). Було виділено основний пакет рішення, який включає такі пакети, як Domain, в якому зберігаються об’єкти якими обмінюються інші складові системи, в тому числі й мережею. Application, який містить в собі обробку запитів користувача, комунікацію з сервером, зберігання даних під час роботи. Presentation, в якому зберігаються файли, що відповідають за інтерфейс користувача, навігацію між вікнами та інтерналізацію.

4 UML ДІАГРАМА СТАНІВ

Для проєктування клієнтської частини попередньо була розроблена UML діаграму компонент (див. рис. 2). Частини коду, що відповідають за деякі з цих станів знаходять у додатку Б. Початково користувач авторизується, після чого має можливість налаштувати систему під себе та користуватися нею, до прикладу, створюючі тренерів або завдання.	

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування клієнтської частини програмної системи, розробки прецедентів використання проєкту. Була розроблена програмна реалізація клієнтської частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування Dart та фреймворку Flutter.
Також були розроблені діаграми станів, пакетів та компонентів.

