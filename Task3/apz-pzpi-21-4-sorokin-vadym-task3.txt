1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT частини розробленої системи взаємодіє з одним типом користувачів, а саме з відвідувачами зали. Прямою взаємодією з користувача відбувається за допомогою монітора, на який виводяться актуальні дані. Пристрій відправляє дані датчиків і в результаті виводить відповідь сервера на екран.
Взаємодія користувача з IoT частиною системи представлено на діаграмі прецедентів (див. рис. 1).
Таким чином, за допомогою діаграми прецедентів було окреслено функціональні вимоги до IoT частини.

2 ПРОГРАМНА РЕАЛІЗАЦІЯ

Для демонстрації функціональних можливостей IoT частини системи, було прийнято рішення реалізувати програмну реалізацію мовою програмування Rust, що максимально наближено до апаратних обмежень IoT девайсів.	
Для виведення інформації використовується cli інтерфейс. Надсилання даних реалізується за допомогою легкої бібліотеки ureq, самі дані передаються у форматі JSON. Також для довгострокового доступу на сервері існує таблиця з ідентифікаторами, які можна присвоїти до IoT пристрою і мати можливість аналізувати показники датчика. 
Програма написана з можливістю подальшого розширення та зрозумілості розробником, проте засоби оптимізації Rust дозволяють створювати ефективне програмне забезпечення для пристроїв з обмеженими характеристиками.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання IoT частини системи було обрано мову програмування Rust. Компіляція відбувається за допомогою rustc.
Для створення запитів використовується бібліотека ureq. Для серіалізації та десеріалізації – бібліотека serde. Загалом для створення ефективного середовища було використано tokio, що оптимізував операції вводу-виводу. Більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 2).
Для більш детальної візуалізації взаємодії пристрою з користувачами системи було розроблено діаграму взаємодії (див. додат. А).
Також на основі взаємодії пристрою було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. додат. Б).
Таким чином, за допомогою діаграм пакетів, взаємодії та діяльності було визначено основні технології та архітектуру системи.
Приклади коду функціональної реалізації IoT частини системи представлено у додатку В.

ВИСНОВКИ
У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT програмної частини. При розробці продукту дотримувались вимоги до чистого коду мови програмування Rust.
