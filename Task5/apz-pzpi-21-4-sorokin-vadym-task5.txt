1 UML ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачами системи є відвідувачі спортзали. За допомогою мобільного додатку, спортсменам надаються такі можливості перегляд власних вправ, прив’язка IoT частини до свого облікового запису, вибір наступної вправи. 
Для проєктування клієнтської частини попередньо була розроблена діаграма прецедентів (див. рис. 1).

2 ДІАГРАМА КОМПОНЕНТІВ

Для надання уявлення про склад програмних компонентів, з яких складається система, було створено діаграму компонентів (рис. 2). З неї видно, що основним файлом, який запускає програму і вказує основні налаштування, є MainActivity.kt.
Файли userScreen.kt та authorizationScreens.kt з пакета presentation.screens відповідають за навігацію та для відображення вмісту. В пакеті Domain.repository.kt знаходиться інтерфейс для взаємодії з репозиторіями даних. Application.repositoryImpl.kt своєю чергою має реалізацію, яка взаємодіє з back end частиною проєкту. Також Domain має пакет dto.kt, в якому зберігаються всі сутності, якими оперує програмна система.
Також пакет Application зберігає в собі реалізації ViewModel, які контролюють стан застосунку, та зберігаються налаштування DI бібліотеки koin.
Кожен файл у пакеті Presentation.Screens зберігаються конкретні відображення (View), що не було прописано для кожного під пакета за для економії місця та зрозумілості на одному прикладі (ui.presentation.userScreen.kt).

3 UML ДІАГРАМА ПАКЕТІВ

В результаті аналізу структури моделі програмної системи було виділено пакети, які складають систему та зовнішні залежності. Ці пакети та зв’язки між ними можна побачити на Діаграмі пакетів (див. рис. 3).
Було виділено основний пакет рішення, який включає такі пакети, як Ui, Application, Domain. Також є пакети зовнішніх залежностей Jetpack Compose для побудови інтерфейсу, Koin для обміну даними між об’єктами та Ktor з Kotlinx.Serialize для http/s запитів на backend.

4 UML ДІАГРАМА СТАНІВ

Для опису потоку роботи в застосунку, було розроблено діаграму станів (див. рис. 4). Початково користувач авторизується, після чого може переглянути свій список занять, прив’язати IoT та обрати наступне заняття.
Детально показано такі стани користувача, як неавторизований та активний, процес переходу від одного стану до іншого. Чітко видно, в яких станах перебуває об’єкт в рамках експлуатації системи.

ВИСНОВКИ

В ході даної лабораторної роботи було розроблено клієнтську частину програмної системи: створено відображення сторінок мобільного застосунку для відображення необхідної інформації, забезпечено отримання даних з backend за допомогою API. 
