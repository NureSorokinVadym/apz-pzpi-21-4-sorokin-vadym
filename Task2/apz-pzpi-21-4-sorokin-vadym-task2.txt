1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Користувачами розробленої системи є 3 типи акторів: відвідувач спортзалу, тренер, та адміністратор (або ж власник спортзалу).
Основними потребами відвідувача спортзалу є: можливість переглянути свої вправи, прив’язати пристрій IoT до свого облікового запису, переглядати інформацію про себе та про задані вправи.
Основними потребами тренера є: перегляд людей, що займаються в залі, назначати вправи відвідувачам, продивлятися інформацію про вправи.
Основними потребами адміністратора є: керування тренерами, тобто наймати та звільняти, додавати вправи, видаляти облікові записи, видаляти та додавати вправи.
Також загальною потребою всіх користувачів є зміна мови та можливість входу та реєстрації.
Взаємодію кожної ролі користувача з системою представлено на діаграмі прецедентів.
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів системи.

2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ

Для проєктування бази даних було розроблено ER-модель бази даних (див. додат. А). Вона складається з 10 основних таблиць: користувачі (user_base), персональні тренери (personal), спеціалізації (specification), адміністратори (admin), нагороди (reward), зв'язок користувачів з нагородами (reward_user), типи вправ (exercice_type), вправи (exercice), зв'язок користувачів з вправами (exercice_user) та IoT пристрої користувачів (iot_user).
У базі даних наявні наступні зв'язки між сутностями:
спеціалізації й персональні тренери мають зв'язок один до багатьох, бо одна спеціалізація може бути у декількох персональних тренерів;
користувачі й персональні тренери мають зв'язок один до одного, бо один користувач може бути персональним тренером, і кожен персональний тренер є користувачем;
користувачі й адміністратори мають зв'язок один до одного, бо один користувач може бути адміністратором, і кожен адміністратор є користувачем;
нагороди й користувачі мають зв'язок багато до багатьох, тому було створено проміжну таблицю для зв'язку користувачів з нагородами, бо користувач може мати декілька нагород, і одна нагорода може бути у декількох користувачів;
типи вправ і вправи мають зв'язок один до багатьох, бо один тип вправ може мати безліч вправ;
вправи й користувачі мають зв'язок багато до багатьох, тому було створено проміжну таблицю для зв'язку користувачів з вправами, бо користувач може виконувати декілька вправ, і одна вправа може бути виконана різними користувачами;
користувачі й IoT пристрої мають зв'язок один до багатьох, бо один користувач може мати декілька IoT пристроїв;
вправи користувачів і IoT пристрої мають зв'язок один до багатьох, бо один IoT пристрій може бути пов'язаний з наступною вправою користувача.
Додаткові зв'язки та деталі:
Всі основні таблиці мають поля `create_at` і `update_at` для відстеження часу створення та оновлення записів.
У таблиці користувачів є унікальне поле `email` для забезпечення унікальності облікових записів.
Таблиця персональних тренерів і адміністраторів мають унікальний зовнішній ключ `user_id`, що вказує на їхній зв'язок "один до одного" з таблицею користувачів.
У таблиці вправ користувачів є поля для зберігання деталей виконання вправи: тривалість, кількість повторень, вага, пульс та частота серцевих скорочень.
Таблиця IoT пристроїв користувачів має поле `next_exercise_id`, що посилається на наступну вправу користувача, яку має виконати пристрій.
Ця модель даних дозволяє ефективно зберігати та керувати інформацією про користувачів, їхні ролі, вправи, досягнення та IoT пристрої в системі управління фітнес-програмами.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання серверної частини системи було обрано кілька мов програмування, а саме: Rust для написання клієнтської логіки та обробки даних, Python для написання прототипу штучного інтелекту. 
Системою керування базами даних було обрано PostgreSQL, до якої з серверної частини будуть надходити запити.
Для маршрутизації запитів та балансування навантаження було використано Nginx. Загалом сервер використовуватиме технологію Docker та Docker-Compose для створення платформонезалежних контейнерів з можливістю легкого розвертання, що зменшує кількість вимог до сервера на якому буде розгортатися програмне забезпечення.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 1). Для демонстрації можливостей сервера було обрано програне забезпечення HttpPie, що має можливість створювати та надсилати запити різних типів, встановлювати вміст запиту та його заголовки.

4 СПЕЦИФІКАЦІЯ REST

REST API в розробленому проєкті складається з 29 кінцевих точок. Кожна кінцева точка відповідає за надання даних клієнту та виконання бізнес-логіки. 	Специфікація кожної кінцевої точки REST API проєкту наведена у таблиці 1.
Таблиця 1 – Специфікація REST 
Кінцева точка Ролі доступу HTTP метод Опис
api/auth/create_admin Всі post Створює нового адміністратора
api/admin/create_personal Адміністратор post Створює нового персонального тренера
api/admin/delete_exercise/<id> Адміністратор delete Видаляє вправу за її ID
api/auth/log_up Всі post Реєструє нового користувача
api/auth/log_in Всі post Аутентифікує користувача
api/auth/user_info Всі get Отримує інформацію про поточного користувача
api/auth/user_types Адміністратор та тренер get Отримує список типів користувачів
api/admin/create_personal Адміністратор post Створює нову спеціалізацію
api/admin/create_specification Адміністратор post Отримує список спеціалізацій
api/personal/specifications Тренер get Отримує список клієнтів тренера
api/personal/get_clients Тренер get Отримує список вправ конкретного користувача
api/personal/get_exercises/<user_id> Тренер get Отримує список всіх вправ
api/personal/get_exercises_list Всі get Додає вправу для користувача
api/personal/add_exercise Всі post Додає вправу для користувача
api/personal/get_exercise_types Всі get Отримує список типів вправ
api/personal/give_reward Тренер post Надає нагороду користувачеві
api/personal/create_exercise Тренер post Створює нову вправу
api/personal/create_exercise_type Тренер post Створює новий тип вправ
api/user/exercices Користувач get Отримує список вправ користувача
api/user/give_exercice Користувач post Додає вправу для себе
api/user/get_exercises_types Користувач get Отримує список типів вправ
api/user/give_me_exercise Користувач post Встановлює наступну вправу для IoT пристрою
api/personal/create_reward Тренер post Створює нову нагороду
api/user/get_exercises Користувач get Отримує список вправ користувача
api/user/register_iot Користувач post Реєструє новий IoT пристрій
api/user/give_iot Користувач post Прив'язує IoT пристрій до користувача
api/user/have_iot Користувач get Перевіряє, чи має користувач IoT пристрій
api/user/set_exercise_task Користувач post Встановлює вправу як завдання для IoT пристрою
api/user/get_exercise_task Користувач get Отримує поточне завдання з IoT пристрою
Таким чином, за допомогою таблиці специфікації REST було визначено основні кінцеві точки для запитів до розробленого серверного застосунку. 

ВИСНОВКИ

У ході виконання лабораторної роботи було покращено навички з проєктування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проєктуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду.
